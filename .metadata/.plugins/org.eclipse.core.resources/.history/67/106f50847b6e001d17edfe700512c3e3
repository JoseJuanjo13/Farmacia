package controller;

import java.net.URL;
import java.time.LocalDate;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import aplicacion.FarmaciaAplicacion;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import modelo.Ciudad;
import modelo.Cliente;
import modelo.DescuentoInteres;
import modelo.Farmacia;
import modelo.Presentacion;
import modelo.Producto;
import modelo.Proveedor;
import modelo.Sucursal;
import modelo.TipoProveedor;
import persistencia.Persistencia;

public class ContenedorPrincipalController {

	@FXML
	private ResourceBundle resources;

	@FXML
	private URL location;

    @FXML
    private TextField txtCantidadProducto, txtPrecioProducto, txtNombreProducto, txtIdProducto;

    @FXML
    private TableView<Producto> tableViewProducto;

    @FXML
    private TableColumn<Producto, Double> columnPrecioProducto;

    @FXML
    private TableColumn<Producto, Integer> columnCantidadProducto;

    @FXML
    private TableColumn<Producto, String> columnNombreProducto;

    @FXML
    private TableColumn<Producto, LocalDate> columnFechaVencimientoProducto;

    @FXML
    private TableColumn<Producto, String> columnIdProdcuto;

    @FXML
    private ComboBox<String> boxDesInProducto;
    ObservableList<String> listaDesInProd = FXCollections.observableArrayList();

    @FXML
    private ComboBox<String> boxPresenProducto;
    ObservableList<String> listaPresen = FXCollections.observableArrayList();

    @FXML
    private DatePicker dateFecVenciProducto;

    @FXML
    private TextField txtCedulaCliente, txtNombreCliente, txtApellidoCliente, txtTelefonoCliente, txtEmailCliente, txtCiudadCliente, txtDeptoCliente, txtDireccionCliente;

    @FXML
    private TableView<Cliente> tableViewCliente;

    @FXML
    private TableColumn<Cliente, String> columnCedulaCliente, columnNombreCliente, columnApellidoCliente, columnTelefonoCliente, columnEmailCliente;

    @FXML
    private TextField txtNitProveedor, txtNombreProveedor;

    @FXML
    private ComboBox<String> boxTipoProveedor;
    ObservableList<String> listaTipoProv = FXCollections.observableArrayList();

    @FXML
    private TableView<Proveedor> tableViewProveedor;

    @FXML
    private TableColumn<Proveedor, String> columnNitProveedor, columnNombreProveedor;

    @FXML
    private DatePicker fechaFactura;

    @FXML
    private ComboBox<String> boxCedulaCli;
    ObservableList<String> listaCedula = FXCollections.observableArrayList();

    @FXML
    private TextField txtCodigoProd, txtUnidades;

    private Label labelTotal, labelSubtotal, labelIVA;

    private double acumTotal = 0, acumIVA = 0, acumTotalIVA = 0;

    @FXML
    private ComboBox<String> boxNitSucursal;
    ObservableList<String> listaNit = FXCollections.observableArrayList();

    @FXML
    private ComboBox<String> boxCiudadSucursal;
    ObservableList<String> listaCiudad = FXCollections.observableArrayList();

    @FXML
    private TextField txtNombreSucursal, txtTelSucursal;

    @FXML
    private TableView<Sucursal> tableViewSucursal;

    @FXML
    private TableColumn<Sucursal, String> columnNombreSucu, columnTelefonoSucu;
    
    @FXML
    private RadioButton rbtReporteCliente; 


    private Producto productoSeleccionado;
    private Cliente clienteSeleccionado;
    private Proveedor proveedorSeleccionado;
    private Sucursal sucursalSeleccionado;

	ModelFactoryController modelFactoryController;
	Farmacia farmacia;
	FarmaciaAplicacion aplicacion;
	Persistencia persistencia;

    ObservableList<Producto> listadoProductos = FXCollections.observableArrayList();
    ObservableList<Cliente> listadoClientes = FXCollections.observableArrayList();
    ObservableList<Proveedor> listadoProveedores = FXCollections.observableArrayList();
    ObservableList<Sucursal> listadoSucursales = FXCollections.observableArrayList();

	public ContenedorPrincipalController() {

		modelFactoryController = ModelFactoryController.getInstance();
		farmacia = modelFactoryController.getFarmacia();
	}


	@FXML
	 void initialize() {

		for (DescuentoInteres descuentoInteres : farmacia.getListaDescuentoInteres()) {
			listaDesInProd.add(descuentoInteres.getTipo());
		}
		boxDesInProducto.setItems(listaDesInProd);

		for (Presentacion presentacion : farmacia.getListaPresentaciones()) {
			listaPresen.add(presentacion.getNombrePresentacion());
		}
		boxPresenProducto.setItems(listaPresen);

		for (TipoProveedor tipoProveedor : farmacia.getListaTipoProveedores()) {
			listaTipoProv.add(tipoProveedor.getTipoProveedor());
		}
		boxTipoProveedor.setItems(listaTipoProv);

		for (Proveedor proveedor : farmacia.getListaProveedores()) {
			listaNit.add(proveedor.getNit());
		}
		boxNitSucursal.setItems(listaNit);

		for (Ciudad ciudad : farmacia.getListaCiudades()) {
			listaCiudad.add(ciudad.getNombre());
		}
		boxCiudadSucursal.setItems(listaCiudad);

		//producto
		this.columnNombreProducto.setCellValueFactory(new PropertyValueFactory<>("nombre"));
		this.columnPrecioProducto.setCellValueFactory(new PropertyValueFactory<>("precio"));
		this.columnCantidadProducto.setCellValueFactory(new PropertyValueFactory<>("cantidad"));
		this.columnFechaVencimientoProducto.setCellValueFactory(new PropertyValueFactory<>("fechaVencimiento"));
		this.columnIdProdcuto.setCellValueFactory(new PropertyValueFactory<>("idProducto"));

	   	tableViewProducto.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
    	    if (newSelection != null) {
    	    	productoSeleccionado = newSelection;
    	    	cargarCampos();
    	    }
    	});

	   	//cliente
	   	this.columnCedulaCliente.setCellValueFactory(new PropertyValueFactory<>("cedula"));
	   	this.columnNombreCliente.setCellValueFactory(new PropertyValueFactory<>("nombre"));
	   	this.columnApellidoCliente.setCellValueFactory(new PropertyValueFactory<>("apellido"));
	   	this.columnTelefonoCliente.setCellValueFactory(new PropertyValueFactory<>("telefono"));
	   	this.columnEmailCliente.setCellValueFactory(new PropertyValueFactory<>("email"));

	   	tableViewCliente.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
    	    if (newSelection != null) {
    	    	clienteSeleccionado = newSelection;
    	    	cargarCampos2();
    	    }
    	});

	   	//proveedor
	   	this.columnNitProveedor.setCellValueFactory(new PropertyValueFactory<>("nit"));
	   	this.columnNombreProveedor.setCellValueFactory(new PropertyValueFactory<>("nombreEmpresa"));

	   	tableViewProveedor.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
    	    if (newSelection != null) {
    	    	proveedorSeleccionado = newSelection;
    	    	cargarCampos3();
    	    }
    	});

	   	//sucursal
	   	this.columnNombreSucu.setCellValueFactory(new PropertyValueFactory<>("nombre"));
	   	this.columnTelefonoSucu.setCellValueFactory(new PropertyValueFactory<>("telefono"));

	   	tableViewSucursal.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
    	    if (newSelection != null) {
    	    	sucursalSeleccionado = newSelection;
    	    	cargarCampos4();
    	    }
    	});

	 }


    private void cargarCampos4() {
		if(sucursalSeleccionado != null)
		{
			txtNombreSucursal.setText(sucursalSeleccionado.getNombre());
			txtTelSucursal.setText(sucursalSeleccionado.getTelefono());
			boxNitSucursal.setValue(sucursalSeleccionado.getProveedor().getNit());
			boxCiudadSucursal.setValue(sucursalSeleccionado.getCiudad().getNombre());

		}else{
			mostrarMensaje("Sucursal Seleccion", "Sucursal Seleccion", "NO se ha seleccionado ninguna Sucursal", AlertType.WARNING);
		}

	}


	private void cargarCampos3() {
		if(proveedorSeleccionado != null)
		{
	    	txtNitProveedor.setText(proveedorSeleccionado.getNit());
	    	txtNombreProveedor.setText(proveedorSeleccionado.getNombreEmpresa());
	    	boxTipoProveedor.setValue(proveedorSeleccionado.getTipoProveedor().getTipoProveedor());

		}else{
			mostrarMensaje("Proveedor Seleccion", "Proveedor Seleccion", "NO se ha seleccionado ningún Proveedor", AlertType.WARNING);
		}

	}


	private void cargarCampos2() {
		if(clienteSeleccionado != null)
		{
		    txtCedulaCliente.setText(clienteSeleccionado.getCedula());
	    	txtNombreCliente.setText(clienteSeleccionado.getNombre());
	    	txtApellidoCliente.setText(clienteSeleccionado.getApellido());
	    	txtTelefonoCliente.setText(clienteSeleccionado.getTelefono());
	    	txtEmailCliente.setText(clienteSeleccionado.getEmail());
	    	txtCiudadCliente.setText(clienteSeleccionado.getCiudad());
	    	txtDeptoCliente.setText(clienteSeleccionado.getDepto());
	    	txtDireccionCliente.setText(clienteSeleccionado.getDireccion());

		}else{
			mostrarMensaje("Cliente Seleccion", "Cliente Seleccion", "NO se ha seleccionado ningún Cliente", AlertType.WARNING);
		}
	}


	private void cargarCampos() {

    		if(productoSeleccionado != null)
    		{
    			String precioD = String.valueOf(productoSeleccionado.getPrecio());
    			String cantidad = String.valueOf(productoSeleccionado.getCantidad());

    	    	txtIdProducto.setText(productoSeleccionado.getIdProducto());
    	    	txtNombreProducto.setText(productoSeleccionado.getNombre());
    	    	txtPrecioProducto.setText(precioD);
    	    	txtCantidadProducto.setText(cantidad);
    	    	dateFecVenciProducto.setValue(productoSeleccionado.getFechaVencimiento());
    	    	boxDesInProducto.setValue(productoSeleccionado.getDescuentoInteres().getTipo());
    	    	boxPresenProducto.setValue(productoSeleccionado.getPresentacion().getNombrePresentacion());

    		}else{
    			mostrarMensaje("Producto Seleccion", "Producto Seleccion", "NO se ha seleccionado ningún Producto", AlertType.WARNING);
    		}

	}

  //------------------------------------------------- PRODUCTO -----------------------------------------------------------------
	@FXML
    void crearProducto(ActionEvent event) {

    	String idProducto = txtIdProducto.getText();
    	String nombre = txtNombreProducto.getText();
    	String precio = txtPrecioProducto.getText();
    	String cantidad = txtCantidadProducto.getText();
    	LocalDate fechaVencimiento = dateFecVenciProducto.getValue();
    	String descInte = boxDesInProducto.getValue();
    	String presentacion = boxPresenProducto.getValue();

    	if(verificarDatos(idProducto, nombre, precio, cantidad, fechaVencimiento, descInte, presentacion)){
    		if (farmacia.obtenerProducto(idProducto) != null) {
    			mostrarMensaje("Notificacion Usuario", "Producto No Registrado", "El id del producto se encuentra registrado", AlertType.WARNING);
			}
    		else{
    			Producto producto;
    			try {
    				producto = modelFactoryController.crearProducto(idProducto, nombre, precio, cantidad, fechaVencimiento, descInte, presentacion);

    				if (producto != null) {
    					listadoProductos.add(0, producto);
    					mostrarMensaje("Notificacion Usuario", "Producto Registrado", "El Producto ha sido registrado", AlertType.INFORMATION);
    					limpiarRegistros();
    				}else{
    					mostrarMensaje("Notificacion Usuario", "Producto No Registrado", "El Producto no ha sido registrado", AlertType.WARNING);
    				}
    			} catch (Exception e) {
    				e.printStackTrace();
    			}
    		}
    	}
    }

	@FXML
    void actualizarProducto(ActionEvent event) {

    	String idProducto = txtIdProducto.getText();
    	String nombre = txtNombreProducto.getText();
    	String precio = txtPrecioProducto.getText();
    	String cantidad = txtCantidadProducto.getText();
    	LocalDate fechaVencimiento = dateFecVenciProducto.getValue();
    	String descInte = boxDesInProducto.getValue();
    	String presentacion = boxPresenProducto.getValue();

		if(productoSeleccionado != null){
			if(verificarDatos(idProducto, nombre, precio, cantidad, fechaVencimiento, descInte, presentacion))
			{
				try {
					modelFactoryController.actualizarProducto(idProducto, nombre, precio, cantidad, fechaVencimiento, descInte, presentacion, productoSeleccionado.getIdProducto());
					productoSeleccionado.setIdProducto(idProducto);
					productoSeleccionado.setNombre(nombre);
					double precio_ = Double.valueOf(precio);
					productoSeleccionado.setPrecio(precio_);
					int cantidad_ = Integer.valueOf(cantidad);
					productoSeleccionado.setCantidad(cantidad_);
					productoSeleccionado.setFechaVencimiento(fechaVencimiento);
					DescuentoInteres descInte_ = farmacia.obtenerDescInte(descInte);
					productoSeleccionado.setDescuentoInteres(descInte_);
					Presentacion presentacion_ = farmacia.obtenerPresen(presentacion);
					productoSeleccionado.setPresentacion(presentacion_);

					tableViewProducto.refresh();
					limpiarRegistros();

					mostrarMensaje("Notificacion Usuario", "Producto Actualizado", "El Producto "+ idProducto +" ha sido actualizado exitosamente", AlertType.INFORMATION);
					//limpiarRegistros();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}else {
			mostrarMensaje("Producto Seleccion", "Producto Seleccion", "NO se ha seleccionado ningún Producto", AlertType.WARNING);
		}


    }

    @FXML
    void eliminarProducto(ActionEvent event) {

    	if(productoSeleccionado != null){
			 int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Desea eliminar el producto "+productoSeleccionado.getIdProducto());
			 if(showConfirmDialog == 0){
				 try {
					if(modelFactoryController.eliminarProducto(productoSeleccionado.getIdProducto())){
						mostrarMensaje("Producto Eliminado", "Producto Eliminado", "El Producto ha sido eliminado", AlertType.WARNING);
					 }else{
						 mostrarMensaje("Producto Seleccion", "Producto Seleccion", "NO se ha seleccionado ningún Producto", AlertType.INFORMATION);
					 }
				 listadoProductos.remove(productoSeleccionado);
				 limpiarRegistros();
				 tableViewProducto.refresh();;
				 } catch (Exception e){
					e.printStackTrace();
				 }
			}
		}else{
			mostrarMensaje("Producto Seleccion", "Producto Seleccion", "NO se ha seleccionado ningún Producto", AlertType.WARNING);
		}

    }

	private void limpiarRegistros() {

    	txtIdProducto.clear(); txtNombreProducto.clear(); txtPrecioProducto.clear(); txtCantidadProducto.clear();
    	dateFecVenciProducto.setValue(null); boxDesInProducto.setValue(null); boxPresenProducto.setValue(null);
    	txtCedulaCliente.clear(); txtNombreCliente.clear();txtApellidoCliente.clear();txtTelefonoCliente.clear();
    	txtEmailCliente.clear();txtCiudadCliente.clear();txtDeptoCliente.clear();txtDireccionCliente.clear();
    	txtNitProveedor.clear(); txtNombreProveedor.clear(); boxTipoProveedor.setValue(null);
	}

    private boolean verificarDatos(String idProducto, String nombre, String precio, String cantidad, LocalDate fechaVencimiento,
 			String descInte, String presentacion) {
 		// TODO Auto-generated method stub
     	String notificacion = "";

     	if (idProducto== null || idProducto.equals("")) {
			notificacion += "El identificador producto es invalido\n";
		}
 		if(nombre == null || nombre.equals("")){
 			notificacion += "El nombre es invalido\n";
 		}
 		if(precio == null || precio.equals("")){
 			notificacion += "El precio es invalido\n";
 		}
 		if(cantidad == null || cantidad.equals("")){
 			notificacion += "La cantidad es invalida\n";
 		}
 		if(fechaVencimiento == null || fechaVencimiento.equals("")){
 			notificacion += "La fecha vencimiento es invalida\n";
 		}
 		if(descInte == null || descInte.equals("")){
 			notificacion += "El descuento o interes es invalido\n";
 		}
 		if(presentacion == null || presentacion.equals("")){
 			notificacion += "La presentacion es invalida\n";
 		}
 		if(notificacion.equals("")){
 			return true;
 		}

 		mostrarMensaje("Notificacion Producto", "Informacion del producto invalido", notificacion, AlertType.WARNING);


 		return false;
 	}

//------------------------------------------------- CLIENTE -----------------------------------------------------------------
    @FXML
    void crearCliente(ActionEvent event) {

    	String cedula = txtCedulaCliente.getText();
    	String nombre = txtNombreCliente.getText();
    	String apellido = txtApellidoCliente.getText();
    	String telefono = txtTelefonoCliente.getText();
    	String email = txtEmailCliente.getText();
    	String ciudad = txtCiudadCliente.getText();
    	String depto = txtDeptoCliente.getText();
    	String direccion = txtDireccionCliente.getText();

    	if(verificarDatosC(cedula, nombre, apellido, direccion, telefono, email, ciudad, depto)){

    		if (farmacia.obtenerCliente(cedula) != null) {
    			mostrarMensaje("Notificacion Usuario", "Cliente No Registrado", "La cedula se encuentra registrado", AlertType.WARNING);
			}
    		else{
        		Cliente cliente;
        		try {
    				cliente = modelFactoryController.crearCliente(cedula, nombre, apellido, direccion, telefono, email, ciudad, depto);
    				if (cliente != null) {
    					listadoClientes.add(0, cliente);
    					mostrarMensaje("Notificacion Usuario", "Cliente Registrado", "El Cliente ha sido registrado", AlertType.INFORMATION);
    					limpiarRegistros();
    				}else{
    					mostrarMensaje("Notificacion Usuario", "Cliente No Registrado", "El Cliente no ha sido registrado", AlertType.WARNING);
    				}
    			} catch (Exception e) {
    				e.printStackTrace();
    			}
    		}
    	}

    }

    @FXML
    void actualizarCliente(ActionEvent event) {

    	String cedula = txtCedulaCliente.getText();
    	String nombre = txtNombreCliente.getText();
    	String apellido = txtApellidoCliente.getText();
    	String telefono = txtTelefonoCliente.getText();
    	String email = txtEmailCliente.getText();
    	String ciudad = txtCiudadCliente.getText();
    	String depto = txtDeptoCliente.getText();
    	String direccion = txtDireccionCliente.getText();

		if(clienteSeleccionado != null){
			if(verificarDatosC(cedula, nombre, apellido, direccion, telefono, email, ciudad, depto))
			{
				try {
					modelFactoryController.actualizarCliente(cedula, nombre, apellido, direccion, telefono, email, ciudad, depto, clienteSeleccionado.getCedula());
					clienteSeleccionado.setCedula(cedula);
					clienteSeleccionado.setNombre(nombre);
					clienteSeleccionado.setApellido(apellido);
					clienteSeleccionado.setTelefono(telefono);
					clienteSeleccionado.setEmail(email);
					clienteSeleccionado.setCiudad(ciudad);
					clienteSeleccionado.setDepto(depto);

					tableViewCliente.refresh();
					limpiarRegistros();

					mostrarMensaje("Notificacion Usuario", "Cliente Actualizado", "El Cliente "+ cedula +" ha sido actualizado exitosamente", AlertType.INFORMATION);
					//limpiarRegistros();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}else {
			mostrarMensaje("Cliente Seleccion", "Cliente Seleccion", "NO se ha seleccionado ningún Cliente", AlertType.WARNING);
		}

    }

    @FXML
    void eliminarCliente(ActionEvent event) {
    	if(clienteSeleccionado != null){
			 int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Desea eliminar el cliente "+clienteSeleccionado.getCedula());
			 if(showConfirmDialog == 0){
				 try {
					if(modelFactoryController.eliminarCliente(clienteSeleccionado.getCedula())){
						mostrarMensaje("Cliente Eliminado", "Cliente Eliminado", "El Cliente ha sido eliminado", AlertType.WARNING);
					 }else{
						 mostrarMensaje("Cliente Seleccion", "Cliente Seleccion", "NO se ha seleccionado ningún Cliente", AlertType.INFORMATION);
					 }
				 listadoClientes.remove(clienteSeleccionado);
				 limpiarRegistros();
				 tableViewCliente.refresh();;
				 } catch (Exception e){
					e.printStackTrace();
				 }
			}
		}else{
			mostrarMensaje("Cliente Seleccion", "Cliente Seleccion", "NO se ha seleccionado ningún Cliente", AlertType.WARNING);
		}
    }

  //------------------------------------------------- PROVEEDOR -----------------------------------------------------------------

    @FXML
    void crearProveedor(ActionEvent event) {

    	String nit = txtNitProveedor.getText();
    	String nombreProveedor = txtNombreProveedor.getText();
    	String tipoProveedor = boxTipoProveedor.getValue();

    	if(verificarDatosP(nit, nombreProveedor, tipoProveedor)){
    		if (farmacia.obtenerProveedor(nit) != null) {
    			mostrarMensaje("Notificacion Usuario", "Proveedor No Registrado", "El nit se encuentra registrado", AlertType.WARNING);
			}else{
        		Proveedor proveedor;
        		try {
        			proveedor = modelFactoryController.crearProveedor(nit, nombreProveedor, tipoProveedor);
    				if (proveedor != null) {
    					listadoProveedores.add(0, proveedor);
    					mostrarMensaje("Notificacion Usuario", "Proveedor Registrado", "El Proveedor ha sido registrado", AlertType.INFORMATION);
    					limpiarRegistros();
    				}else{
    					mostrarMensaje("Notificacion Usuario", "Proveedor No Registrado", "El Proveedor no ha sido registrado", AlertType.WARNING);
    				}
    			} catch (Exception e) {
    				e.printStackTrace();
    			}
    		}
    	}

    }

    private boolean verificarDatosP(String nit, String nombreProveedor, String tipoProveedor) {
    	String notificacion = "";

     	if (nit == null || nit.equals("")) {
			notificacion += "El nit es invalido\n";
		}
 		if(nombreProveedor == null || nombreProveedor.equals("")){
 			notificacion += "El nombre es invalido\n";
 		}
 		if(tipoProveedor == null || tipoProveedor.equals("")){
 			notificacion += "El tipo proveedor es invalido\n";
 		}
 		if(notificacion.equals("")){
 			return true;
 		}

 		mostrarMensaje("Notificacion Proveedor", "Informacion del proveedor invalido", notificacion, AlertType.WARNING);

 		return false;
}


	@FXML
    void actualizarProveedor(ActionEvent event) {

    	String nit = txtNitProveedor.getText();
    	String nombreProveedor = txtNombreProveedor.getText();
    	String tipoProveedor = boxTipoProveedor.getValue();

		if(proveedorSeleccionado != null){
			if(verificarDatosP(nit, nombreProveedor, tipoProveedor))
			{
				try {
					modelFactoryController.actualizarProveedor(nit, nombreProveedor, tipoProveedor, proveedorSeleccionado.getNit());
					proveedorSeleccionado.setNit(nit);
					proveedorSeleccionado.setNombreEmpresa(nombreProveedor);
					TipoProveedor tipoProveedor_ = farmacia.obtenerTipoProveedor(tipoProveedor);
					proveedorSeleccionado.setTipoProveedor(tipoProveedor_);

					tableViewProveedor.refresh();
					limpiarRegistros();

					mostrarMensaje("Notificacion Usuario", "Proveedor Actualizado", "El Proveedor "+ nit +" ha sido actualizado exitosamente", AlertType.INFORMATION);
					//limpiarRegistros();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}else {
			mostrarMensaje("Proveedor Seleccion", "Proveedor Seleccion", "NO se ha seleccionado ningún Proveedor", AlertType.WARNING);
		}

    }

    @FXML
    void eliminarProveedor(ActionEvent event) {

    	if(proveedorSeleccionado != null){
			 int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Desea eliminar el proveedor "+ proveedorSeleccionado.getNombreEmpresa());
			 if(showConfirmDialog == 0){
				 try {
					if(modelFactoryController.eliminarProveedor(proveedorSeleccionado.getNit())){
						mostrarMensaje("Proveedor Eliminado", "Proveedor Eliminado", "El Proveedor ha sido eliminado", AlertType.WARNING);
					 }else{
						 mostrarMensaje("Proveedor Seleccion", "Proveedor Seleccion", "NO se ha seleccionado ningún Proveedor", AlertType.INFORMATION);
					 }
				 listadoProveedores.remove(proveedorSeleccionado);
				 limpiarRegistros();
				 tableViewProveedor.refresh();;
				 } catch (Exception e){
					e.printStackTrace();
				 }
			}
		}else{
			mostrarMensaje("Proveedor Seleccion", "Proveedor Seleccion", "NO se ha seleccionado ningún Proveedor", AlertType.WARNING);
		}

    }

	private boolean verificarDatosC(String cedula, String nombre, String apellido, String direccion, String telefono, String email,
		String ciudad, String depto) {
     	String notificacion = "";

     	if (cedula== null || cedula.equals("")) {
			notificacion += "La cedula es invalida\n";
		}
 		if(nombre == null || nombre.equals("")){
 			notificacion += "El nombre es invalido\n";
 		}
 		if(apellido == null || apellido.equals("")){
 			notificacion += "El apellido es invalido\n";
 		}
 		if(telefono == null || telefono.equals("")){
 			notificacion += "El telefono es invalido\n";
 		}
 		if(email == null || email.equals("")){
 			notificacion += "El email es invalido\n";
 		}
 		if(ciudad == null || ciudad.equals("")){
 			notificacion += "La ciudad es invalida\n";
 		}
 		if(depto == null || depto.equals("")){
 			notificacion += "El departamento es invalido\n";
 		}
 		if (direccion == null || direccion.equals("")) {
 			notificacion += "La direccion es invalida\n";
		}
 		if(notificacion.equals("")){
 			return true;
 		}

 		mostrarMensaje("Notificacion Cliente", "Informacion del cliente invalido", notificacion, AlertType.WARNING);


 		return false;
}

	//------------------------------------------------- SUCURSAL -----------------------------------------------------------------

    @FXML
    void crearSucursal(ActionEvent event) {

       	String nombre = txtNombreSucursal.getText();
    	String telefono = txtTelSucursal.getText();
    	String nit = boxNitSucursal.getValue();
    	String ciudad = boxCiudadSucursal.getValue();


    	if(verificarDatosS(nombre, telefono, nit, ciudad)){
    		if (farmacia.obtenerSucursal(nombre) != null) {
    			mostrarMensaje("Notificacion Usuario", "Sucursal No Registrado", "La sucursal se encuentra registrado", AlertType.WARNING);
			}else{
        		Sucursal sucursal;
        		try {
        			sucursal = modelFactoryController.crearSucursal(nombre, telefono, nit, ciudad);
    				if (sucursal != null) {
    					listadoSucursales.add(0, sucursal);
    					mostrarMensaje("Notificacion Usuario", "Sucursal Registrado", "La Sucursal ha sido registrado", AlertType.INFORMATION);
    					limpiarRegistros();
    				}else{
    					mostrarMensaje("Notificacion Usuario", "Sucursal No Registrado", "La Sucursal no ha sido registrado", AlertType.WARNING);
    				}
    			} catch (Exception e) {
    				e.printStackTrace();
    			}
    		}
    	}

    }


	@FXML
    void actualizarSucursal(ActionEvent event) {

       	String nombre = txtNombreSucursal.getText();
    	String telefono = txtTelSucursal.getText();
    	String nit = boxNitSucursal.getValue();
    	String ciudad = boxCiudadSucursal.getValue();

		if(sucursalSeleccionado != null){
			if(verificarDatosS(nombre, telefono, nit, ciudad))
			{
				try {
					modelFactoryController.actualizarSucursal(nombre, telefono, nit, ciudad, sucursalSeleccionado.getNombre());
					sucursalSeleccionado.setNombre(nombre);
					sucursalSeleccionado.setTelefono(telefono);
					Proveedor proveedor_ = farmacia.obtenerProveedor(nit);
					sucursalSeleccionado.setProveedor(proveedor_);
					Ciudad ciudad_ = farmacia.obtenerCiudad2(ciudad);
					sucursalSeleccionado.setCiudad(ciudad_);

					tableViewSucursal.refresh();
					limpiarRegistros();

					mostrarMensaje("Notificacion Usuario", "Sucursal Actualizado", "La Sucursal ha sido actualizado exitosamente", AlertType.INFORMATION);
					//limpiarRegistros();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}else {
			mostrarMensaje("Sucursal Seleccion", "Sucursal Seleccion", "NO se ha seleccionado ninguna Sucursal", AlertType.WARNING);
		}

    }

    @FXML
    void eliminarSucursal(ActionEvent event) {

    	if(sucursalSeleccionado != null){
			 int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Desea eliminar la sucursal "+ sucursalSeleccionado.getNombre());
			 if(showConfirmDialog == 0){
				 try {
					if(modelFactoryController.eliminarSucursal(sucursalSeleccionado.getNombre())){
						mostrarMensaje("Sucursal Eliminado", "Sucursal Eliminado", "La Sucursal ha sido eliminada", AlertType.WARNING);
					 }else{
						 mostrarMensaje("Sucursal Seleccion", "Sucursal Seleccion", "NO se ha seleccionado ninguna Sucursal", AlertType.INFORMATION);
					 }
				 listadoSucursales.remove(sucursalSeleccionado);
				 limpiarRegistros();
				 tableViewSucursal.refresh();;
				 } catch (Exception e){
					e.printStackTrace();
				 }
			}
		}else{
			mostrarMensaje("Sucursal Seleccion", "Sucursal Seleccion", "NO se ha seleccionado ninguna Sucursal", AlertType.WARNING);
		}

    }

    private boolean verificarDatosS(String nombre, String telefono, String nit, String ciudad) {
    	String notificacion = "";

     	if (nombre== null || nombre.equals("")) {
			notificacion += "El nombre es invalido\n";
		}
 		if(telefono == null || telefono.equals("")){
 			notificacion += "El telefono es invalido\n";
 		}
 		if(nit == null || nit.equals("")){
 			notificacion += "El nit es invalido\n";
 		}
 		if(telefono == null || telefono.equals("")){
 			notificacion += "La ciudad es invalida\n";
 		}
 		if(notificacion.equals("")){
 			return true;
 		}

 		mostrarMensaje("Notificacion Usuario", "Informacion de la sucursal es invalida", notificacion, AlertType.WARNING);

 		return false;
 	}

	//------------------------------------------------- FACTURA -----------------------------------------------------------------

    @FXML
    void agregarDetalleFac(ActionEvent event) {

    }

	@FXML
    void eliminarDetalleFac(ActionEvent event) {

    }

    @FXML
    void crearFactura(ActionEvent event) {

    }

	private void mostrarMensaje(String titulo,String header,String contenido,AlertType alertType) {
		Alert alert = new Alert(alertType);
       	alert.setTitle(titulo);
    	alert.setHeaderText(header);
    	alert.setContentText(contenido);
    	alert.showAndWait();
	}

	public void setAplicacion(FarmaciaAplicacion farmaciaAplicacion) {

		this.aplicacion = farmaciaAplicacion;
		this.farmacia = modelFactoryController.getFarmacia();

		//producto
		tableViewProducto.getItems().clear();
		tableViewProducto.setItems(getProductos());

		//cliente
		tableViewCliente.getItems().clear();
		tableViewCliente.setItems(getClientes());

		//proveedor
		tableViewProveedor.getItems().clear();
		tableViewProveedor.setItems(getProveedores());

		//sucursal
		tableViewSucursal.getItems().clear();
		tableViewSucursal.setItems(getSucursales());

	}


	private ObservableList<Sucursal> getSucursales() {
		// TODO Auto-generated method stub
		listadoSucursales.clear();
		listadoSucursales.addAll(farmacia.getListaSucursales());
		return listadoSucursales;
	}


	private ObservableList<Proveedor> getProveedores() {
		// TODO Auto-generated method stub
		listadoProveedores.clear();
		listadoProveedores.addAll(farmacia.getListaProveedores());
		return listadoProveedores;
	}


	private ObservableList<Cliente> getClientes() {
		// TODO Auto-generated method stub
		listadoClientes.clear();
		listadoClientes.addAll(farmacia.getListaClientes());
		return listadoClientes;
	}


	private ObservableList<Producto> getProductos() {
		// TODO Auto-generated method stub
		listadoProductos.clear();
		listadoProductos.addAll(farmacia.getListaProductos());
		return listadoProductos;
	}
	
// -------------------------------------------------------------- REPORTES -------------------------------------------------------------------------->>
    
    @FXML
    void generarReporte(ActionEvent event) {
    
		if(rbtReporteCliente.isSelected()) {
				modelFactoryController.generarReporte1("cliente");			
		} 
    }
}
